{"version":3,"sources":["components/FeatureItem.js","components/DetailsCard.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["FeatureItem","_this$props","this","props","classes","letter","name","hidden","react_default","a","createElement","style","display","alignItems","Avatar","aria-label","className","avatarIcon","Typography","noWrap","variant","Component","withStyles","theme","width","height","backgroundColor","palette","secondary","main","marginRight","DetailsCard","console","log","title","getTitleCard","getDetailsCard","details","features","map","feature","components_FeatureItem","gateway","app","Card","titleCard","CardContent","_this$props$details","date","appVersion","gatewayVersion","rtlItems","getFeatureItemList","card","CardHeader","avatar","avatarTitle","getReleaseLetter","titleTypographyProps","subheader","dateStr","_dateStr$split","split","_dateStr$split2","Object","slicedToArray","day","month","year","Date","toLocaleDateString","formattedDate","justifyContent","maxWidth","margin","padding","primary","NavBar","AppBar","position","Toolbar","color","createMuiTheme","blue","pink","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Stages","response","flexContainer","flexDirection","RTL","release","components_DetailsCard","liveItems","Live","MuiThemeProvider","components_NavBar","List","React","Boolean","window","location","hostname","match","fetch","concat","process","then","r","json","data","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c50d0688.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Avatar, Typography } from '@material-ui/core'\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = theme => ({\n    avatarIcon: {\n        width: 25,\n        height: 25,\n        backgroundColor: theme.palette.secondary.main,\n        marginRight: 10\n    }\n});\n\nclass FeatureItem extends Component {\n\n    render() {\n        const { classes, letter, name, hidden } = this.props;\n\n        return <div style={{ display: hidden ? 'none' : 'flex', alignItems: 'center' }}>\n            <Avatar aria-label=\"recipe\" className={classes.avatarIcon} >\n                {letter}\n            </Avatar>\n            <Typography noWrap variant='h6'>{name}</Typography>\n        </div>\n    }\n}\n\nexport default withStyles(styles)(FeatureItem);","import React, { Component } from 'react'\nimport { Card, CardContent, Typography, CardHeader, Avatar, withStyles } from '@material-ui/core';\nimport FeatureItem from './FeatureItem';\n\nconst styles = theme => ({\n    card: {\n        maxWidth: 345,\n        margin: 10,\n        padding: 5\n    },\n    titleCard: {\n        maxWidth: 345,\n        margin: 10,\n        padding: 5,\n        display: 'flex',\n        alignItems: 'center'\n    },\n    avatarTitle: {\n        width: 50,\n        height: 50,\n        backgroundColor: theme.palette.primary.main,\n    }\n});\n\nclass DetailsCard extends Component {\n\n    render() {\n        console.log(this.props);\n\n        return this.props.title ? this.getTitleCard(this.props) : this.getDetailsCard(this.props)\n    }\n\n    getFeatureItemList(props) {\n        if (props.details.features) {\n            return this.props.details.features.map((feature) => <FeatureItem letter='B' name={feature} />);\n        }\n\n        return null;\n    }\n\n    getReleaseLetter(gateway, app) {\n        if (gateway && app) {\n            return 'F';\n        } else {\n            return gateway ? 'G' : 'A';\n        }\n    }\n\n    getTitleCard(props) {\n        const { classes } = props;\n        return <Card className={classes.titleCard}>\n            <CardContent>\n                <Typography noWrap variant='h3'>{this.props.title}</Typography>\n            </CardContent>\n        </Card>\n    }\n\n    getDetailsCard(props) {\n        const { classes, details: { name, date, gateway, app, appVersion, gatewayVersion } } = this.props;\n        const formattedDate = (dateStr) => {\n            if(dateStr) {\n                const [day, month, year] = dateStr.split(/[-/]/);\n                const options = { year: 'numeric', month: 'long', day: 'numeric' };\n                return new Date(year, month - 1, day).toLocaleDateString('en-GB', options);\n            }\n\n            return '';\n          }\n        let rtlItems = this.getFeatureItemList(this.props);\n\n        return (\n            <Card className={classes.card}>\n                <CardHeader\n                    avatar={\n                        <Avatar aria-label=\"recipe\" className={classes.avatarTitle}>\n                            {this.getReleaseLetter(gateway, app)}\n                        </Avatar>\n                    }\n                    titleTypographyProps={{ variant: 'h5', noWrap: true }}\n                    title={name}\n                    subheader={formattedDate(date)} />\n                <CardContent hidden={!rtlItems}>\n                    {rtlItems}\n                </CardContent>\n\n                <CardContent style={{ display: !!(appVersion || gatewayVersion) ? 'flex' : 'none', alignItems: 'center', justifyContent: 'space-between' }} hidden={true}>\n\n                    <FeatureItem hidden={!app} letter='A' name={appVersion} />\n                    <FeatureItem hidden={!gateway} letter='G' name={gatewayVersion} />\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nexport default withStyles(styles)(DetailsCard);","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport ToolBar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\n\nconst NavBar = () => {\n    return (\n        <div>\n            <AppBar position='static'>\n                <ToolBar>\n                    <Typography variant='h4' color='inherit'>\n                        Release Dashboard\n                    </Typography>\n                </ToolBar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport List from '@material-ui/core/List'\nimport { createMuiTheme } from '@material-ui/core';\nimport DetailsCard from './components/DetailsCard'\nimport NavBar from './components/NavBar'\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { blue, pink } from '@material-ui/core/colors';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: pink\n  },\n  color: {\n    primary: blue\n  }\n});\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      Stages: props.response.Stages\n    }\n  }\n\n  render() {\n    const flexContainer = {\n      display: 'flex',\n      flexDirection: 'row',\n      padding: 10,\n    };\n\n    console.log(this.state.Stages);\n    let rtlItems = this.state.Stages.RTL.map((release) => <DetailsCard details={release} />);\n    let liveItems = this.state.Stages.Live.map((release) => <DetailsCard details={release} />);\n\n    return <MuiThemeProvider theme={theme}>\n      <div className=\"container\">\n        <NavBar />\n        <List style={flexContainer}>\n          <DetailsCard title='RTL'/>\n          {rtlItems}\n        </List>\n        <List style={flexContainer}>\n        <DetailsCard title='Live'/>\n          {liveItems}\n        </List>\n      </div>\n    </MuiThemeProvider>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nfetch(`${process.env.PUBLIC_URL}/data/output.json`)\n.then((r) => r.json())\n.then((data) =>{\n    ReactDOM.render(<App response={data}/>, document.getElementById('root'));\n})\n  \n//ReactDOM.render(  <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}